//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/StarterAssets.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Starter
{
    public partial class @StarterInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @StarterInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""StarterAssets"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f62a4b92-ef5e-4175-8f4c-c9075429d32c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6bc1aaf4-b110-4ff7-891e-5b9fe6f32c4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""2690c379-f54d-45be-a724-414123833eb4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""980e881e-182c-404c-8cbf-3d09fdb48fef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f08cdcdd-6db0-48c9-8011-c07193debd06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""98b5d43a-b522-4a00-ae33-7fec01a5ae1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""b7594ddb-26c9-4ba2-bd5a-901468929edc"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2063a8b5-6a45-43de-851b-65f3d46e7b58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""64e4d037-32e1-4fb9-80e4-fc7330404dfe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0fce8b11-5eab-4e4e-a741-b732e7b20873"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7bdda0d6-57a8-47c8-8238-8aecf3110e47"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bb94b405-58d3-4998-8535-d705c1218a98"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""929d9071-7dd0-4368-9743-6793bb98087e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28abadba-06ff-4d37-bb70-af2f1e35a3b9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""45f115b6-9b4f-4ba8-b500-b94c93bf7d7e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2f9aa65-db06-4c5b-a2e9-41bc8acb9517"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed66cbff-2900-4a62-8896-696503cfcd31"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1d171b6-19d8-47a6-ba3a-71b6a8e7b3c0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone,ScaleVector2(x=300,y=300)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc65b89f-9bd3-43fb-92af-d0d87ba5faa4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8fcd86e-dcfd-4f88-8e93-b638cdbf3320"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddda7ac5-d670-4ab5-a871-422bf44fd0d3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6349c20-79e6-4763-b10b-14f4f4be5f7b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grid"",
            ""id"": ""70593858-4369-4a76-83f0-f972195e3f0f"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""3cdc7b0b-d2e4-4b62-9c47-9e51cd9151fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""9aefd316-152d-4757-a1c9-119f572ff13e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""45d9f7d4-8a93-4c70-ba13-08392eb3dbbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""654b1992-1f2d-49aa-a179-496d3c29e6b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""eb2c2c81-8d7e-415a-b98d-e657bf66dbf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GridReset"",
                    ""type"": ""Button"",
                    ""id"": ""23d0079b-0e3a-4c27-ad93-708a0d40e031"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitGrid"",
                    ""type"": ""Button"",
                    ""id"": ""64eff1a9-6052-4593-9262-4330f71609d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UndoMove"",
                    ""type"": ""Button"",
                    ""id"": ""620f24a2-7ba0-400b-9ba7-d13644174a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2015dddd-dc4e-4799-ba09-5a0472dd3e47"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b09aebaf-a642-48ea-86af-1576ea1eed24"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b94e00e1-4966-4b61-a87d-b23146033bf6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0113fdd-7ac2-45bc-921b-30e4afa08b22"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f6eb7a1-4e7d-4fca-ae42-03ef735dffcf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f2140d1-b8ed-40e8-9f96-8ff53829a0f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bd1c236-1aac-414d-9268-c6711a97b446"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d3e2a10-0cf1-4641-8f61-424cbb53baf3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0eeec93-5957-4a5b-83b3-a36c442a2bb4"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5572882f-2019-4265-bfe9-432b52509671"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GridReset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05768ac4-cac3-4acf-b54d-1bcca6f9fb29"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGrid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dfa71dc-8973-4b69-b1cd-db933f5c6105"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UndoMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""21198a32-dc4d-4f41-8f41-9eef28ada1bb"",
            ""actions"": [
                {
                    ""name"": ""Q press"",
                    ""type"": ""Button"",
                    ""id"": ""9e1f9e26-afb2-4a14-a1ed-a7fbf4426d9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E press"",
                    ""type"": ""Button"",
                    ""id"": ""b950250a-03f5-4914-95db-97c4a8dd4559"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W press"",
                    ""type"": ""Button"",
                    ""id"": ""20cc894c-cebf-426c-8f43-64cf0d24b25b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S press"",
                    ""type"": ""Button"",
                    ""id"": ""9cf9b110-20a5-4880-85bc-ca50ed003a24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter press"",
                    ""type"": ""Button"",
                    ""id"": ""0a544540-1bfe-4232-b813-f3f8b9a9e259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""J press"",
                    ""type"": ""Button"",
                    ""id"": ""7ea6db5d-bb67-4b6c-95e9-abb08bdf7e66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""K press"",
                    ""type"": ""Button"",
                    ""id"": ""1a81918b-06ad-48a1-a5bb-ffa561b18698"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a0bb106-2c03-4f6b-8114-41053de5ba30"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec8fc37-8c8b-4a25-9705-0ce9e4e581a1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5bee20a-6e9f-4692-8856-1f6016e9aca5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89e79ff3-acb7-4f82-932b-088b3cde0e40"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""999deb20-0c75-414d-98c8-6340827da945"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""879b9c52-0151-47c2-93b5-90cb11314c7e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ced06247-17e1-4e89-9e4f-dd12fa3516a2"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40889f28-b5b8-4c6b-972b-5892f7e124eb"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""J press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e04b60d-f5d3-44b1-bcb6-15a46f64a5ba"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""K press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller"",
            ""bindingGroup"": ""Xbox Controller"",
            ""devices"": []
        },
        {
            ""name"": ""PS4 Controller"",
            ""bindingGroup"": ""PS4 Controller"",
            ""devices"": []
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
            m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
            m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            // Grid
            m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
            m_Grid_Forward = m_Grid.FindAction("Forward", throwIfNotFound: true);
            m_Grid_Backward = m_Grid.FindAction("Backward", throwIfNotFound: true);
            m_Grid_Right = m_Grid.FindAction("Right", throwIfNotFound: true);
            m_Grid_Left = m_Grid.FindAction("Left", throwIfNotFound: true);
            m_Grid_Enter = m_Grid.FindAction("Enter", throwIfNotFound: true);
            m_Grid_GridReset = m_Grid.FindAction("GridReset", throwIfNotFound: true);
            m_Grid_ExitGrid = m_Grid.FindAction("ExitGrid", throwIfNotFound: true);
            m_Grid_UndoMove = m_Grid.FindAction("UndoMove", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Qpress = m_UI.FindAction("Q press", throwIfNotFound: true);
            m_UI_Epress = m_UI.FindAction("E press", throwIfNotFound: true);
            m_UI_Wpress = m_UI.FindAction("W press", throwIfNotFound: true);
            m_UI_Spress = m_UI.FindAction("S press", throwIfNotFound: true);
            m_UI_Enterpress = m_UI.FindAction("Enter press", throwIfNotFound: true);
            m_UI_Jpress = m_UI.FindAction("J press", throwIfNotFound: true);
            m_UI_Kpress = m_UI.FindAction("K press", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Look;
        private readonly InputAction m_Player_Sprint;
        private readonly InputAction m_Player_Interact;
        private readonly InputAction m_Player_Jump;
        public struct PlayerActions
        {
            private @StarterInput m_Wrapper;
            public PlayerActions(@StarterInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Look => m_Wrapper.m_Player_Look;
            public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
            public InputAction @Interact => m_Wrapper.m_Player_Interact;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Grid
        private readonly InputActionMap m_Grid;
        private List<IGridActions> m_GridActionsCallbackInterfaces = new List<IGridActions>();
        private readonly InputAction m_Grid_Forward;
        private readonly InputAction m_Grid_Backward;
        private readonly InputAction m_Grid_Right;
        private readonly InputAction m_Grid_Left;
        private readonly InputAction m_Grid_Enter;
        private readonly InputAction m_Grid_GridReset;
        private readonly InputAction m_Grid_ExitGrid;
        private readonly InputAction m_Grid_UndoMove;
        public struct GridActions  //add grid actions to starter asset
        {
            private @StarterInput m_Wrapper;
            public GridActions(@StarterInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Forward => m_Wrapper.m_Grid_Forward;
            public InputAction @Backward => m_Wrapper.m_Grid_Backward;
            public InputAction @Right => m_Wrapper.m_Grid_Right;
            public InputAction @Left => m_Wrapper.m_Grid_Left;
            public InputAction @Enter => m_Wrapper.m_Grid_Enter;
            public InputAction @GridReset => m_Wrapper.m_Grid_GridReset;
            public InputAction @ExitGrid => m_Wrapper.m_Grid_ExitGrid;
            public InputAction @UndoMove => m_Wrapper.m_Grid_UndoMove;
            public InputActionMap Get() { return m_Wrapper.m_Grid; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
            public void AddCallbacks(IGridActions instance)  //add grid actions to starter asset
            {
                if (instance == null || m_Wrapper.m_GridActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GridActionsCallbackInterfaces.Add(instance);
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @GridReset.started += instance.OnGridReset;
                @GridReset.performed += instance.OnGridReset;
                @GridReset.canceled += instance.OnGridReset;
                @ExitGrid.started += instance.OnExitGrid;
                @ExitGrid.performed += instance.OnExitGrid;
                @ExitGrid.canceled += instance.OnExitGrid;
                @UndoMove.started += instance.OnUndoMove;
                @UndoMove.performed += instance.OnUndoMove;
                @UndoMove.canceled += instance.OnUndoMove;
            }

            private void UnregisterCallbacks(IGridActions instance)  //add grid actions to starter asset
            {
                @Forward.started -= instance.OnForward;
                @Forward.performed -= instance.OnForward;
                @Forward.canceled -= instance.OnForward;
                @Backward.started -= instance.OnBackward;
                @Backward.performed -= instance.OnBackward;
                @Backward.canceled -= instance.OnBackward;
                @Right.started -= instance.OnRight;
                @Right.performed -= instance.OnRight;
                @Right.canceled -= instance.OnRight;
                @Left.started -= instance.OnLeft;
                @Left.performed -= instance.OnLeft;
                @Left.canceled -= instance.OnLeft;
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
                @GridReset.started -= instance.OnGridReset;
                @GridReset.performed -= instance.OnGridReset;
                @GridReset.canceled -= instance.OnGridReset;
                @ExitGrid.started -= instance.OnExitGrid;
                @ExitGrid.performed -= instance.OnExitGrid;
                @ExitGrid.canceled -= instance.OnExitGrid;
                @UndoMove.started -= instance.OnUndoMove;
                @UndoMove.performed -= instance.OnUndoMove;
                @UndoMove.canceled -= instance.OnUndoMove;
            }

            public void RemoveCallbacks(IGridActions instance)  //add grid actions to starter asset
            {
                if (m_Wrapper.m_GridActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGridActions instance)   //add grid actions to starter asset
            {
                foreach (var item in m_Wrapper.m_GridActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GridActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GridActions @Grid => new GridActions(this);   //add grid actions to starter asset

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_Qpress;
        private readonly InputAction m_UI_Epress;
        private readonly InputAction m_UI_Wpress;
        private readonly InputAction m_UI_Spress;
        private readonly InputAction m_UI_Enterpress;
        private readonly InputAction m_UI_Jpress;
        private readonly InputAction m_UI_Kpress;
        public struct UIActions
        {
            private @StarterInput m_Wrapper;
            public UIActions(@StarterInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Qpress => m_Wrapper.m_UI_Qpress;
            public InputAction @Epress => m_Wrapper.m_UI_Epress;
            public InputAction @Wpress => m_Wrapper.m_UI_Wpress;
            public InputAction @Spress => m_Wrapper.m_UI_Spress;
            public InputAction @Enterpress => m_Wrapper.m_UI_Enterpress;
            public InputAction @Jpress => m_Wrapper.m_UI_Jpress;
            public InputAction @Kpress => m_Wrapper.m_UI_Kpress;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @Qpress.started += instance.OnQpress;
                @Qpress.performed += instance.OnQpress;
                @Qpress.canceled += instance.OnQpress;
                @Epress.started += instance.OnEpress;
                @Epress.performed += instance.OnEpress;
                @Epress.canceled += instance.OnEpress;
                @Wpress.started += instance.OnWpress;
                @Wpress.performed += instance.OnWpress;
                @Wpress.canceled += instance.OnWpress;
                @Spress.started += instance.OnSpress;
                @Spress.performed += instance.OnSpress;
                @Spress.canceled += instance.OnSpress;
                @Enterpress.started += instance.OnEnterpress;
                @Enterpress.performed += instance.OnEnterpress;
                @Enterpress.canceled += instance.OnEnterpress;
                @Jpress.started += instance.OnJpress;
                @Jpress.performed += instance.OnJpress;
                @Jpress.canceled += instance.OnJpress;
                @Kpress.started += instance.OnKpress;
                @Kpress.performed += instance.OnKpress;
                @Kpress.canceled += instance.OnKpress;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @Qpress.started -= instance.OnQpress;
                @Qpress.performed -= instance.OnQpress;
                @Qpress.canceled -= instance.OnQpress;
                @Epress.started -= instance.OnEpress;
                @Epress.performed -= instance.OnEpress;
                @Epress.canceled -= instance.OnEpress;
                @Wpress.started -= instance.OnWpress;
                @Wpress.performed -= instance.OnWpress;
                @Wpress.canceled -= instance.OnWpress;
                @Spress.started -= instance.OnSpress;
                @Spress.performed -= instance.OnSpress;
                @Spress.canceled -= instance.OnSpress;
                @Enterpress.started -= instance.OnEnterpress;
                @Enterpress.performed -= instance.OnEnterpress;
                @Enterpress.canceled -= instance.OnEnterpress;
                @Jpress.started -= instance.OnJpress;
                @Jpress.performed -= instance.OnJpress;
                @Jpress.canceled -= instance.OnJpress;
                @Kpress.started -= instance.OnKpress;
                @Kpress.performed -= instance.OnKpress;
                @Kpress.canceled -= instance.OnKpress;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        private int m_XboxControllerSchemeIndex = -1;
        public InputControlScheme XboxControllerScheme
        {
            get
            {
                if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller");
                return asset.controlSchemes[m_XboxControllerSchemeIndex];
            }
        }
        private int m_PS4ControllerSchemeIndex = -1;
        public InputControlScheme PS4ControllerScheme
        {
            get
            {
                if (m_PS4ControllerSchemeIndex == -1) m_PS4ControllerSchemeIndex = asset.FindControlSchemeIndex("PS4 Controller");
                return asset.controlSchemes[m_PS4ControllerSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IGridActions
        {
            void OnForward(InputAction.CallbackContext context);
            void OnBackward(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
            void OnLeft(InputAction.CallbackContext context);
            void OnEnter(InputAction.CallbackContext context);
            void OnGridReset(InputAction.CallbackContext context);
            void OnExitGrid(InputAction.CallbackContext context);
            void OnUndoMove(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnQpress(InputAction.CallbackContext context);
            void OnEpress(InputAction.CallbackContext context);
            void OnWpress(InputAction.CallbackContext context);
            void OnSpress(InputAction.CallbackContext context);
            void OnEnterpress(InputAction.CallbackContext context);
            void OnJpress(InputAction.CallbackContext context);
            void OnKpress(InputAction.CallbackContext context);
        }
    }
}
